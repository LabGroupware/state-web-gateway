plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.cloud.tools.jib' version '3.4.4'
}

group = 'org.cresplanex.api.state'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url "https://buf.build/gen/maven"
	}
}

ext {
	set('logstashEncoder', "8.0")
	set('springdocVersion', "2.6.0")
	set('grpcStarterVersion', "3.1.0.RELEASE")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "net.logstash.logback:logstash-logback-encoder:${logstashEncoder}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
	implementation "net.devh:grpc-client-spring-boot-starter:${grpcStarterVersion}"

	implementation "org.cresplanex.api.state:common:1.0.6"

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

ext {
	imageVersion = project.hasProperty('imageVersion') ? project.imageVersion : 'latest'
	imageArchitecture = project.hasProperty('imageArchitecture') ? project.imageArchitecture : 'amd64'
	imageOs = project.hasProperty('imageOs') ? project.imageOs : 'linux'
}

jib {
	from {
		platforms {
			platform {
				architecture = imageArchitecture
				os = imageOs
			}
		}
	}
	to {
		image = "ablankz/nova-web-gateway"
		tags = ["${imageVersion}-${imageArchitecture}", "latest-${imageArchitecture}"]
	}
}

def platforms = [
		['os': 'linux', 'arch': 'amd64'],
		['os': 'linux', 'arch': 'arm64']
]

import com.google.cloud.tools.jib.gradle.PlatformParameters

platforms.each { platform ->

	def taskName = "jibDockerBuild_${platform.os.capitalize()}${platform.arch.capitalize()}"

	tasks.register(taskName) {
		group = 'docker'
		description = "Build Docker image for ${platform.os}/${platform.arch}"
		PlatformParameters pltParam = new PlatformParameters();
		pltParam.setArchitecture(platform.arch)
		pltParam.setOs(platform.os)

		doLast {
			jib.from.platforms.unset()
			jib.from.platforms.addAll([pltParam])
			jib.to.image = "ablankz/nova-web-gateway"
			jib.to.tags = ["${imageVersion}-${platform.arch}", "latest-${platform.arch}"]
			jibDockerBuild.buildDocker()
		}
	}
}

tasks.register('jibMultiBuild') {
	group = 'docker'
	dependsOn tasks.matching { it.name.startsWith('jibDockerBuild_') }
}


import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	filesMatching('**/application.yaml') {
		filter(
				ReplaceTokens,
				tokens: [
						'applicationName': "${rootProject.name}".toString(),
						'version': "${version}".toString(),
				]
		)
	}
}